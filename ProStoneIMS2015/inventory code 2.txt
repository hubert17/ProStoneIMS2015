            var records = ( from s in db.StoneInventorys
                            join t in db.Stones
                            on s.StoneId equals t.Id into st
                            from t in st.DefaultIfEmpty()
                            select new
                            {
                                Id = s.Id,
                                StoneId = s.StoneId,
                                StoneName = t.StoneName,
                                SerialNo = s.SerialNo,
                                Length = s.Length,
                                Width = s.Width,
                                LotNo = s.LotNo,
                                VendorId = s.VendorId
                            });

            //var records = qry
            //                .Where(p => p.StoneName.Contains(searchString) || p.SerialNo.Contains(searchString))
            //                .OrderByDescending(x => x.Id)
            //                .Skip((page.Value - 1) * limit.Value)
            //                .Take(limit.Value)
            //                .ToList()
            //                .Select(s => new StoneInventory
            //                {
            //                    Id = s.Id,
            //                    StoneId = s.StoneId,
            //                    StoneName = s.StoneName,
            //                    SerialNo = s.SerialNo,
            //                    Length = s.Length,
            //                    Width = s.Width,
            //                    LotNo = s.LotNo,
            //                    VendorId = s.VendorId
            //                });

            var total = records.Count();

            if (!string.IsNullOrWhiteSpace(searchString))
            {
                records = records.Where(p => p.StoneName.Contains(searchString) || p.SerialNo.Contains(searchString));
            }

            if (!string.IsNullOrEmpty(sortBy) && !string.IsNullOrEmpty(direction))
            {
                if (direction.Trim().ToLower() == "asc")
                {
                    records = SortHelper.OrderBy(records, sortBy);
                }
                else
                {
                    records = SortHelper.OrderByDescending(records, sortBy);
                }
            }

            //if (page.HasValue && limit.HasValue)
            //{
            //    int start = (page.Value - 1) * limit.Value;
            //    records = records.Skip(start).Take(limit.Value);
            //}

            return Json(new { records, total }, JsonRequestBehavior.AllowGet);